# ----------------------
# Base image: R with version pinned
# ----------------------
FROM rocker/r-ver:4.3.1

LABEL maintainer=""
LABEL description="Slim Bulk RNA-seq pipeline image (no refs baked in)."

# ----------------------
# Install dependencies
# ----------------------
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    wget curl unzip tar gzip bzip2 git \
    build-essential libseccomp-dev pkg-config \
    squashfs-tools cryptsetup uidmap squashfuse fuse-overlayfs fuse2fs \
    libfuse2 libcurl4-openssl-dev libssl-dev libxml2-dev \
    zlib1g-dev libbz2-dev liblzma-dev libpcre3-dev \
    bowtie2 samtools bcftools vcftools default-jdk python3 python3-pip \
    imagemagick poppler-utils ghostscript \
    libfontconfig1-dev libfreetype6-dev libpng-dev libjpeg-dev libtiff5-dev \
    libcairo2-dev libharfbuzz-dev libfribidi-dev \
    libmagick++-dev libmagickcore-dev libmagickwand-dev libpoppler-cpp-dev \
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && \
    unzip /tmp/awscliv2.zip -d /tmp && \
    /tmp/aws/install && \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ----------------------
# Install Apptainer
# ----------------------
RUN wget https://github.com/apptainer/apptainer/releases/download/v1.1.9/apptainer_1.1.9_amd64.deb && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y ./apptainer_1.1.9_amd64.deb && \
    rm apptainer_1.1.9_amd64.deb && \
    ln -s /usr/bin/apptainer /usr/bin/singularity || true

# ----------------------
# CRAN repository
# ----------------------
ENV CRAN_REPO=https://packagemanager.posit.co/cran/2024-01-01

# ----------------------
# Install CRAN packages
# ----------------------
RUN R -e "install.packages(c( \
        'devtools','zoo','gplots','patchwork','ggplot2','optparse','dplyr', \
        'data.table','readr','tidyr','fuzzyjoin','pdftools','stringr','magick','purrr','jsonlite', \
        'rmarkdown','knitr','igraph','reshape2','R.utils'), repos='${CRAN_REPO}')"

# ----------------------
# Install Bioconductor packages
# ----------------------
RUN R -e "if (!requireNamespace('BiocManager', quietly=TRUE)) install.packages('BiocManager', repos='${CRAN_REPO}'); \
          BiocManager::install(c('biomaRt','edgeR'), ask=FALSE, update=FALSE)"

# ----------------------
# Install CellNet from GitHub
# ----------------------
RUN R -e "devtools::install_github('pcahan1/CellNet', ref='master', \
            dependencies=TRUE, lib='/usr/local/lib/R/site-library')"

RUN R -e "devtools::install_github('pcahan1/cancerCellNet', ref='master', \
            dependencies=TRUE, lib='/usr/local/lib/R/site-library')"

RUN R -e "devtools::install_github('BenvenLab/eSNPKaryotyping/eSNPKaryotyping', ref='master', \
            dependencies=TRUE, lib='/usr/local/lib/R/site-library')"

# ----------------------
# Set up workspace
# ----------------------
WORKDIR /workspace
ENV REF_DIR=/ref

# ----------------------
# NOTE: Reference files are NOT copied in, and therefore not automatically present within the image.
# User must mount them:
#   docker run -v /path/to/ref:/ref ...
# ----------------------

# -------------------------------
# Copy in scripts
# -------------------------------
COPY scripts/ /pipeline/

# -------------------------------
# Make scripts executable
# -------------------------------
RUN chmod +x /pipeline/*.sh && chmod +x /pipeline/modules/*/*

# -------------------------------
# Install wdlplay requirements
# -------------------------------
RUN make -C /pipeline/modules/preprocessing/wdlplay install
RUN caper init slurm

# ----------------------
# Environment variables (user MUST override)
# ----------------------
ENV OUTPUT_DIR=""
ENV COSMIC_DIR=""

# ----------------------
# Default entrypoint
# ----------------------
ENTRYPOINT ["bash", "/pipeline/pipeline_runner.sh"]
