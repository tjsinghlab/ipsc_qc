# ----------------------
# Base image: R with version pinned
# ----------------------
FROM rocker/r-ver:4.3.1

LABEL maintainer=""
LABEL description="Slim Bulk RNA-seq pipeline image (no refs baked in)."

# ----------------------
# System dependencies
# ----------------------
# RUN apt-get update && \
#     DEBIAN_FRONTEND=noninteractive apt-get install -y \
#     wget curl unzip tar gzip bzip2 git \
#     build-essential libcurl4-openssl-dev libssl-dev libxml2-dev \
#     zlib1g-dev libbz2-dev liblzma-dev libpcre3-dev \
#     bowtie2 samtools bcftools vcftools default-jdk python3 python3-pip && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install dependencies first
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    wget curl unzip tar gzip bzip2 git \
    build-essential libseccomp-dev pkg-config \
    squashfs-tools cryptsetup uidmap squashfuse fuse-overlayfs fuse2fs \
    libfuse2 libcurl4-openssl-dev libssl-dev libxml2-dev \
    zlib1g-dev libbz2-dev liblzma-dev libpcre3-dev \
    bowtie2 samtools bcftools vcftools default-jdk python3 python3-pip \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Now install Apptainer
RUN wget https://github.com/apptainer/apptainer/releases/download/v1.1.9/apptainer_1.1.9_amd64.deb && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -f -y ./apptainer_1.1.9_amd64.deb && \
    rm apptainer_1.1.9_amd64.deb && \
    ln -s /usr/bin/apptainer /usr/bin/singularity || true

# ----------------------
# R packages
# ----------------------
# ENV CRAN_REPO=https://packagemanager.posit.co/cran/2024-01-01

# RUN R -e "install.packages(c( \
#         'devtools','zoo','gplots','patchwork','ggplot2','optparse','dplyr', \
#         'data.table','tidyr','fuzzyjoin','stringr','purrr','jsonlite', \
#         'rmarkdown','knitr'), repos='${CRAN_REPO}')" \
#     && R -e "if (!requireNamespace('BiocManager', quietly=TRUE)) install.packages('BiocManager', repos='${CRAN_REPO}'); \
#              BiocManager::install(c('biomaRt','edgeR'), ask=FALSE, update=FALSE)" \
#     && rm -rf /tmp/*


# RUN R -e "if (!requireNamespace('devtools', quietly=TRUE)) install.packages('devtools', repos='https://packagemanager.posit.co/cran/2024-01-01'); \
#           devtools::install_github('pcahan1/CellNet', ref='master')"

# ----------------------
# CRAN repository
# ----------------------
ENV CRAN_REPO=https://packagemanager.posit.co/cran/2024-01-01

# ----------------------
# System dependencies needed for R package compilation
# ----------------------
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    libtiff5-dev \
    libcairo2-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    pkg-config \
    git \
 && rm -rf /var/lib/apt/lists/*


# ----------------------
# Install CRAN packages
# ----------------------
RUN R -e "install.packages(c( \
        'devtools','zoo','gplots','patchwork','ggplot2','optparse','dplyr', \
        'data.table','tidyr','fuzzyjoin','stringr','purrr','jsonlite', \
        'rmarkdown','knitr','igraph','reshape2'), repos='${CRAN_REPO}')"

# ----------------------
# Install Bioconductor packages
# ----------------------
RUN R -e "if (!requireNamespace('BiocManager', quietly=TRUE)) install.packages('BiocManager', repos='${CRAN_REPO}'); \
          BiocManager::install(c('biomaRt','edgeR'), ask=FALSE, update=FALSE)"

# ----------------------
# Install CellNet from GitHub
# ----------------------
RUN R -e "devtools::install_github('pcahan1/CellNet', ref='master', \
            dependencies=TRUE, lib='/usr/local/lib/R/site-library')"

RUN R -e "devtools::install_github('pcahan1/cancerCellNet', ref='master', \
            dependencies=TRUE, lib='/usr/local/lib/R/site-library')"

# ----------------------
# Install CellNet from tarball (clean after install)
# ----------------------
# COPY CellNet_*.tar.gz /tmp/

# RUN R -e 'install.packages(list.files("/tmp", pattern="CellNet_.*\\.tar\\.gz$", full.names=TRUE), repos=NULL, type="source")' \
#     && rm -f /tmp/CellNet_*.tar.gz

# ----------------------
# Set up workspace
# ----------------------
WORKDIR /workspace
ENV REF_DIR=/ref

# ----------------------
# NOTE: Reference files are NOT copied in, and therefore not automatically present within the image.
# User must mount them:
#   docker run -v /path/to/ref:/ref ...
# ----------------------

# -------------------------------
# Copy in scripts
# -------------------------------
COPY scripts/ /pipeline/

# -------------------------------
# Make scripts executable
# -------------------------------
RUN chmod +x /pipeline/*.sh && chmod +x /pipeline/modules/*/*

# -------------------------------
# Install wdlplay requirements
# -------------------------------
RUN make -C /pipeline/modules/preprocessing/wdlplay install
RUN caper init slurm

# ----------------------
# Environment variables (user MUST override)
# ----------------------
ENV OUTPUT_DIR=""
ENV COSMIC_DIR=""

# ----------------------
# Default entrypoint
# ----------------------
ENTRYPOINT ["bash", "/pipeline/pipeline_runner.sh"]
